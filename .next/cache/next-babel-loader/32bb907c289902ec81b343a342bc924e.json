{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodri\\\\web3_projects\\\\blockchain-chess\\\\Components\\\\Wallets.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core';\nimport { NoEthereumProviderError, UserRejectedRequestError as UserRejectedRequestErrorInjected } from '@web3-react/injected-connector';\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector';\nimport { UserRejectedRequestError as UserRejectedRequestErrorFrame } from '@web3-react/frame-connector';\nimport { Web3Provider } from '@ethersproject/providers';\nimport { useEagerConnect, useInactiveListener } from '../hooks';\nimport { injected, network, walletconnect, walletlink, ledger, trezor, lattice, frame, authereum, fortmatic, magic, portis, torus } from '../connectors';\nimport { Spinner } from './Spinner';\nexport default function Wallet(openWallet, setOpenWallet) {\n  let ConnectorNames;\n\n  (function (ConnectorNames) {\n    ConnectorNames[\"Injected\"] = \"Injected\";\n    ConnectorNames[\"Network\"] = \"Network\";\n    ConnectorNames[\"WalletConnect\"] = \"WalletConnect\";\n    ConnectorNames[\"WalletLink\"] = \"WalletLink\";\n    ConnectorNames[\"Ledger\"] = \"Ledger\";\n    ConnectorNames[\"Trezor\"] = \"Trezor\";\n    ConnectorNames[\"Lattice\"] = \"Lattice\";\n    ConnectorNames[\"Frame\"] = \"Frame\";\n    ConnectorNames[\"Authereum\"] = \"Authereum\";\n    ConnectorNames[\"Fortmatic\"] = \"Fortmatic\";\n    ConnectorNames[\"Magic\"] = \"Magic\";\n    ConnectorNames[\"Portis\"] = \"Portis\";\n    ConnectorNames[\"Torus\"] = \"Torus\";\n  })(ConnectorNames || (ConnectorNames = {}));\n\n  const connectorsByName = {\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.Network]: network,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.WalletLink]: walletlink,\n    [ConnectorNames.Ledger]: ledger,\n    [ConnectorNames.Trezor]: trezor,\n    [ConnectorNames.Lattice]: lattice,\n    [ConnectorNames.Frame]: frame,\n    [ConnectorNames.Authereum]: authereum,\n    [ConnectorNames.Fortmatic]: fortmatic,\n    [ConnectorNames.Magic]: magic,\n    [ConnectorNames.Portis]: portis,\n    [ConnectorNames.Torus]: torus\n  };\n\n  function getErrorMessage(error) {\n    if (error instanceof NoEthereumProviderError) {\n      return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.';\n    } else if (error instanceof UnsupportedChainIdError) {\n      return \"You're connected to an unsupported network.\";\n    } else if (error instanceof UserRejectedRequestErrorInjected || error instanceof UserRejectedRequestErrorWalletConnect || error instanceof UserRejectedRequestErrorFrame) {\n      return 'Please authorize this website to access your Ethereum account.';\n    } else {\n      console.error(error);\n      return 'An unknown error occurred. Check the console for more details.';\n    }\n  }\n\n  (function (ConnectorNames) {\n    ConnectorNames[\"Injected\"] = \"Injected\";\n    ConnectorNames[\"Network\"] = \"Network\";\n    ConnectorNames[\"WalletConnect\"] = \"WalletConnect\";\n    ConnectorNames[\"WalletLink\"] = \"WalletLink\";\n    ConnectorNames[\"Ledger\"] = \"Ledger\";\n    ConnectorNames[\"Trezor\"] = \"Trezor\";\n    ConnectorNames[\"Lattice\"] = \"Lattice\";\n    ConnectorNames[\"Frame\"] = \"Frame\";\n    ConnectorNames[\"Authereum\"] = \"Authereum\";\n    ConnectorNames[\"Fortmatic\"] = \"Fortmatic\";\n    ConnectorNames[\"Magic\"] = \"Magic\";\n    ConnectorNames[\"Portis\"] = \"Portis\";\n    ConnectorNames[\"Torus\"] = \"Torus\";\n  })(ConnectorNames || (ConnectorNames = {}));\n\n  function getLibrary(provider) {\n    const library = new Web3Provider(provider);\n    library.pollingInterval = 12000;\n    return library;\n  }\n\n  const context = useWeb3React();\n  const {\n    connector,\n    library,\n    chainId,\n    account,\n    activate,\n    deactivate,\n    active,\n    error\n  } = context; // handle logic to recognize the connector currently being activated\n\n  const [activatingConnector, setActivatingConnector] = React.useState();\n  React.useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined);\n    }\n  }, [activatingConnector, connector]); // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n\n  const triedEager = useEagerConnect(); // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n\n  useInactiveListener(!triedEager || !!activatingConnector);\n\n  if (openWallet === false) {\n    __jsx(Navigation, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 4\n      }\n    });\n\n    return __jsx(React.Fragment, null, __jsx(Navigation, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 4\n      }\n    }), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 4\n      }\n    }, \"Open you wallet\"));\n  } else {\n    return __jsx(React.Fragment, null, __jsx(\"hr\", {\n      style: {\n        margin: '2rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }\n    }), __jsx(\"div\", {\n      style: {\n        display: 'grid',\n        gridGap: '1rem',\n        gridTemplateColumns: '1fr',\n        maxWidth: '20rem',\n        margin: 'auto',\n        float: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }\n    }, Object.keys(connectorsByName).map(name => {\n      const currentConnector = connectorsByName[name];\n      const activating = currentConnector === activatingConnector;\n      const connected = currentConnector === connector;\n      const disabled = !triedEager || !!activatingConnector || connected || !!error;\n      return __jsx(\"button\", {\n        style: {\n          height: '3rem',\n          borderRadius: '1rem',\n          borderColor: activating ? 'orange' : connected ? 'green' : 'unset',\n          cursor: disabled ? 'unset' : 'pointer',\n          position: 'relative'\n        },\n        disabled: disabled,\n        key: name,\n        onClick: () => {\n          setActivatingConnector(currentConnector);\n          activate(connectorsByName[name]);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }\n      }, __jsx(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '0',\n          left: '0',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          color: 'black',\n          margin: '0 0 0 1rem'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 15\n        }\n      }, activating && __jsx(Spinner, {\n        color: 'black',\n        style: {\n          height: '25%',\n          marginLeft: '-1rem'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 32\n        }\n      }), connected && __jsx(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"check\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 19\n        }\n      }, \"\\u2705\")), name);\n    })), __jsx(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 7\n      }\n    }, (active || error) && __jsx(\"button\", {\n      style: {\n        height: '3rem',\n        marginTop: '2rem',\n        borderRadius: '1rem',\n        borderColor: 'red',\n        cursor: 'pointer'\n      },\n      onClick: () => {\n        deactivate();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }\n    }, \"Deactivate\"), !!error && __jsx(\"h4\", {\n      style: {\n        marginTop: '1rem',\n        marginBottom: '0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 21\n      }\n    }, getErrorMessage(error))), __jsx(\"hr\", {\n      style: {\n        margin: '2rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 7\n      }\n    }), __jsx(\"div\", {\n      style: {\n        display: 'grid',\n        gridGap: '1rem',\n        gridTemplateColumns: 'fit-content',\n        maxWidth: '20rem',\n        margin: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 7\n      }\n    }, !!(library && account) && __jsx(\"button\", {\n      style: {\n        height: '3rem',\n        borderRadius: '1rem',\n        cursor: 'pointer'\n      },\n      onClick: () => {\n        library.getSigner(account).signMessage('ðŸ‘‹').then(signature => {\n          window.alert(`Success!\\n\\n${signature}`);\n        }).catch(error => {\n          window.alert('Failure!' + (error && error.message ? `\\n\\n${error.message}` : ''));\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }\n    }, \"Sign Message\"), !!(connector === connectorsByName[ConnectorNames.Network] && chainId) && __jsx(\"button\", {\n      style: {\n        height: '3rem',\n        borderRadius: '1rem',\n        cursor: 'pointer'\n      },\n      onClick: () => {\n        ;\n        connector.changeChainId(chainId === 1 ? 4 : 1);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    }, \"Switch Networks\"), connector === connectorsByName[ConnectorNames.WalletConnect] && __jsx(\"button\", {\n      style: {\n        height: '3rem',\n        borderRadius: '1rem',\n        cursor: 'pointer'\n      },\n      onClick: () => {\n        ;\n        connector.close();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }\n    }, \"Kill WalletConnect Session\"), connector === connectorsByName[ConnectorNames.WalletLink] && __jsx(\"button\", {\n      style: {\n        height: '3rem',\n        borderRadius: '1rem',\n        cursor: 'pointer'\n      },\n      onClick: () => {\n        ;\n        connector.close();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }\n    }, \"Kill WalletLink Session\"), connector === connectorsByName[ConnectorNames.Fortmatic] && __jsx(\"button\", {\n      style: {\n        height: '3rem',\n        borderRadius: '1rem',\n        cursor: 'pointer'\n      },\n      onClick: () => {\n        ;\n        connector.close();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }\n    }, \"Kill Fortmatic Session\"), connector === connectorsByName[ConnectorNames.Magic] && __jsx(\"button\", {\n      style: {\n        height: '3rem',\n        borderRadius: '1rem',\n        cursor: 'pointer'\n      },\n      onClick: () => {\n        ;\n        connector.close();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }\n    }, \"Kill Magic Session\"), connector === connectorsByName[ConnectorNames.Portis] && __jsx(React.Fragment, null, chainId !== undefined && __jsx(\"button\", {\n      style: {\n        height: '3rem',\n        borderRadius: '1rem',\n        cursor: 'pointer'\n      },\n      onClick: () => {\n        ;\n        connector.changeNetwork(chainId === 1 ? 100 : 1);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 15\n      }\n    }, \"Switch Networks\"), __jsx(\"button\", {\n      style: {\n        height: '3rem',\n        borderRadius: '1rem',\n        cursor: 'pointer'\n      },\n      onClick: () => {\n        ;\n        connector.close();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 13\n      }\n    }, \"Kill Portis Session\")), connector === connectorsByName[ConnectorNames.Torus] && __jsx(\"button\", {\n      style: {\n        height: '3rem',\n        borderRadius: '1rem',\n        cursor: 'pointer'\n      },\n      onClick: () => {\n        ;\n        connector.close();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 11\n      }\n    }, \"Kill Torus Session\")));\n  }\n}","map":{"version":3,"sources":["C:/Users/rodri/web3_projects/blockchain-chess/Components/Wallets.tsx"],"names":["React","useWeb3React","UnsupportedChainIdError","NoEthereumProviderError","UserRejectedRequestError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","UserRejectedRequestErrorFrame","Web3Provider","useEagerConnect","useInactiveListener","injected","network","walletconnect","walletlink","ledger","trezor","lattice","frame","authereum","fortmatic","magic","portis","torus","Spinner","Wallet","openWallet","setOpenWallet","ConnectorNames","connectorsByName","Injected","Network","WalletConnect","WalletLink","Ledger","Trezor","Lattice","Frame","Authereum","Fortmatic","Magic","Portis","Torus","getErrorMessage","error","console","getLibrary","provider","library","pollingInterval","context","connector","chainId","account","activate","deactivate","active","activatingConnector","setActivatingConnector","useState","useEffect","undefined","triedEager","margin","display","gridGap","gridTemplateColumns","maxWidth","float","Object","keys","map","name","currentConnector","activating","connected","disabled","height","borderRadius","borderColor","cursor","position","top","left","alignItems","color","marginLeft","flexDirection","marginTop","marginBottom","getSigner","signMessage","then","signature","window","alert","catch","message","changeChainId","close","changeNetwork"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { Web3ReactProvider, useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\r\nimport {\r\n  NoEthereumProviderError,\r\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\r\n} from '@web3-react/injected-connector'\r\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector'\r\nimport { UserRejectedRequestError as UserRejectedRequestErrorFrame } from '@web3-react/frame-connector'\r\nimport { Web3Provider } from '@ethersproject/providers'\r\nimport { formatEther } from '@ethersproject/units'\r\n\r\nimport { useEagerConnect, useInactiveListener } from '../hooks'\r\nimport {\r\n  injected,\r\n  network,\r\n  walletconnect,\r\n  walletlink,\r\n  ledger,\r\n  trezor,\r\n  lattice,\r\n  frame,\r\n  authereum,\r\n  fortmatic,\r\n  magic,\r\n  portis,\r\n  torus\r\n} from '../connectors'\r\nimport { Spinner } from './Spinner'\r\n\r\n\r\n\r\nexport default function Wallet(openWallet, setOpenWallet) {\r\n\r\nenum ConnectorNames {\r\n  Injected = 'Injected',\r\n  Network = 'Network',\r\n  WalletConnect = 'WalletConnect',\r\n  WalletLink = 'WalletLink',\r\n  Ledger = 'Ledger',\r\n  Trezor = 'Trezor',\r\n  Lattice = 'Lattice',\r\n  Frame = 'Frame',\r\n  Authereum = 'Authereum',\r\n  Fortmatic = 'Fortmatic',\r\n  Magic = 'Magic',\r\n  Portis = 'Portis',\r\n  Torus = 'Torus'\r\n}\r\n\r\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\r\n  [ConnectorNames.Injected]: injected,\r\n  [ConnectorNames.Network]: network,\r\n  [ConnectorNames.WalletConnect]: walletconnect,\r\n  [ConnectorNames.WalletLink]: walletlink,\r\n  [ConnectorNames.Ledger]: ledger,\r\n  [ConnectorNames.Trezor]: trezor,\r\n  [ConnectorNames.Lattice]: lattice,\r\n  [ConnectorNames.Frame]: frame,\r\n  [ConnectorNames.Authereum]: authereum,\r\n  [ConnectorNames.Fortmatic]: fortmatic,\r\n  [ConnectorNames.Magic]: magic,\r\n  [ConnectorNames.Portis]: portis,\r\n  [ConnectorNames.Torus]: torus\r\n}\r\n\r\nfunction getErrorMessage(error: Error) {\r\n  if (error instanceof NoEthereumProviderError) {\r\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\r\n  } else if (error instanceof UnsupportedChainIdError) {\r\n    return \"You're connected to an unsupported network.\"\r\n  } else if (\r\n    error instanceof UserRejectedRequestErrorInjected ||\r\n    error instanceof UserRejectedRequestErrorWalletConnect ||\r\n    error instanceof UserRejectedRequestErrorFrame\r\n  ) {\r\n    return 'Please authorize this website to access your Ethereum account.'\r\n  } else {\r\n    console.error(error)\r\n    return 'An unknown error occurred. Check the console for more details.'\r\n  }\r\n}\r\n\r\n\r\nenum ConnectorNames {\r\n  Injected = 'Injected',\r\n  Network = 'Network',\r\n  WalletConnect = 'WalletConnect',\r\n  WalletLink = 'WalletLink',\r\n  Ledger = 'Ledger',\r\n  Trezor = 'Trezor',\r\n  Lattice = 'Lattice',\r\n  Frame = 'Frame',\r\n  Authereum = 'Authereum',\r\n  Fortmatic = 'Fortmatic',\r\n  Magic = 'Magic',\r\n  Portis = 'Portis',\r\n  Torus = 'Torus'\r\n}\r\n\r\n\r\nfunction getLibrary(provider: any): Web3Provider {\r\n  const library = new Web3Provider(provider)\r\n  library.pollingInterval = 12000\r\n  return library\r\n}\r\n\r\n  const context = useWeb3React<Web3Provider>()\r\n  const { connector, library, chainId, account, activate, deactivate, active, error } = context\r\n\t\r\n  // handle logic to recognize the connector currently being activated\r\n  const [activatingConnector, setActivatingConnector] = React.useState<any>()\r\n  React.useEffect(() => {\r\n    if (activatingConnector && activatingConnector === connector) {\r\n      setActivatingConnector(undefined)\r\n    }\r\n  }, [activatingConnector, connector])\r\n\r\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\r\n  const triedEager = useEagerConnect()\r\n\r\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\r\n  useInactiveListener(!triedEager || !!activatingConnector)\r\n  if(openWallet === false){\r\n\t  \r\n\t  <Navigation />\r\n\t  return(<>\r\n\t  <Navigation />\r\n\t  <h1>Open you wallet</h1>\r\n\t  \r\n\t  </>)}\r\n\t  \r\n\t  \r\n\t  else{ \t\r\n  return (\r\n    <>\r\n      <hr style={{ margin: '2rem' }} />\r\n      <div\r\n        style={{\r\n          display: 'grid',\r\n          gridGap: '1rem',\r\n          gridTemplateColumns: '1fr',\r\n          maxWidth: '20rem',\r\n          margin: 'auto',\r\n\t\t  float: 'right'\r\n        }}\r\n      >\r\n        {Object.keys(connectorsByName).map(name => {\r\n          const currentConnector = connectorsByName[name]\r\n          const activating = currentConnector === activatingConnector\r\n          const connected = currentConnector === connector\r\n          const disabled = !triedEager || !!activatingConnector || connected || !!error\r\n\r\n          return (\r\n            <button\r\n              style={{\r\n                height: '3rem',\r\n                borderRadius: '1rem',\r\n                borderColor: activating ? 'orange' : connected ? 'green' : 'unset',\r\n                cursor: disabled ? 'unset' : 'pointer',\r\n                position: 'relative'\r\n              }}\r\n              disabled={disabled}\r\n              key={name}\r\n              onClick={() => {\r\n                setActivatingConnector(currentConnector)\r\n                activate(connectorsByName[name])\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  position: 'absolute',\r\n                  top: '0',\r\n                  left: '0',\r\n                  height: '100%',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  color: 'black',\r\n                  margin: '0 0 0 1rem'\r\n                }}\r\n              >\r\n                {activating && <Spinner color={'black'} style={{ height: '25%', marginLeft: '-1rem' }} />}\r\n                {connected && (\r\n                  <span role=\"img\" aria-label=\"check\">\r\n                    âœ…\r\n                  </span>\r\n                )}\r\n              </div>\r\n              {name}\r\n            </button>\r\n          )\r\n        })}\r\n      </div>\r\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n        {(active || error) && (\r\n          <button\r\n            style={{\r\n              height: '3rem',\r\n              marginTop: '2rem',\r\n              borderRadius: '1rem',\r\n              borderColor: 'red',\r\n              cursor: 'pointer'\r\n            }}\r\n            onClick={() => {\r\n              deactivate()\r\n            }}\r\n          >\r\n            Deactivate\r\n          </button>\r\n        )}\r\n\r\n        {!!error && <h4 style={{ marginTop: '1rem', marginBottom: '0' }}>{getErrorMessage(error)}</h4>}\r\n      </div>\r\n\r\n      <hr style={{ margin: '2rem' }} />\r\n\r\n      <div\r\n        style={{\r\n          display: 'grid',\r\n          gridGap: '1rem',\r\n          gridTemplateColumns: 'fit-content',\r\n          maxWidth: '20rem',\r\n          margin: 'auto'\r\n        }}\r\n      >\r\n        {!!(library && account) && (\r\n          <button\r\n            style={{\r\n              height: '3rem',\r\n              borderRadius: '1rem',\r\n              cursor: 'pointer'\r\n            }}\r\n            onClick={() => {\r\n              library\r\n                .getSigner(account)\r\n                .signMessage('ðŸ‘‹')\r\n                .then((signature: any) => {\r\n                  window.alert(`Success!\\n\\n${signature}`)\r\n                })\r\n                .catch((error: any) => {\r\n                  window.alert('Failure!' + (error && error.message ? `\\n\\n${error.message}` : ''))\r\n                })\r\n            }}\r\n          >\r\n            Sign Message\r\n          </button>\r\n        )}\r\n        {!!(connector === connectorsByName[ConnectorNames.Network] && chainId) && (\r\n          <button\r\n            style={{\r\n              height: '3rem',\r\n              borderRadius: '1rem',\r\n              cursor: 'pointer'\r\n            }}\r\n            onClick={() => {\r\n              ;(connector as any).changeChainId(chainId === 1 ? 4 : 1)\r\n            }}\r\n          >\r\n            Switch Networks\r\n          </button>\r\n        )}\r\n        {connector === connectorsByName[ConnectorNames.WalletConnect] && (\r\n          <button\r\n            style={{\r\n              height: '3rem',\r\n              borderRadius: '1rem',\r\n              cursor: 'pointer'\r\n            }}\r\n            onClick={() => {\r\n              ;(connector as any).close()\r\n            }}\r\n          >\r\n            Kill WalletConnect Session\r\n          </button>\r\n        )}\r\n        {connector === connectorsByName[ConnectorNames.WalletLink] && (\r\n          <button\r\n            style={{\r\n              height: '3rem',\r\n              borderRadius: '1rem',\r\n              cursor: 'pointer'\r\n            }}\r\n            onClick={() => {\r\n              ;(connector as any).close()\r\n            }}\r\n          >\r\n            Kill WalletLink Session\r\n          </button>\r\n        )}\r\n        {connector === connectorsByName[ConnectorNames.Fortmatic] && (\r\n          <button\r\n            style={{\r\n              height: '3rem',\r\n              borderRadius: '1rem',\r\n              cursor: 'pointer'\r\n            }}\r\n            onClick={() => {\r\n              ;(connector as any).close()\r\n            }}\r\n          >\r\n            Kill Fortmatic Session\r\n          </button>\r\n        )}\r\n        {connector === connectorsByName[ConnectorNames.Magic] && (\r\n          <button\r\n            style={{\r\n              height: '3rem',\r\n              borderRadius: '1rem',\r\n              cursor: 'pointer'\r\n            }}\r\n            onClick={() => {\r\n              ;(connector as any).close()\r\n            }}\r\n          >\r\n            Kill Magic Session\r\n          </button>\r\n        )}\r\n        {connector === connectorsByName[ConnectorNames.Portis] && (\r\n          <>\r\n            {chainId !== undefined && (\r\n              <button\r\n                style={{\r\n                  height: '3rem',\r\n                  borderRadius: '1rem',\r\n                  cursor: 'pointer'\r\n                }}\r\n                onClick={() => {\r\n                  ;(connector as any).changeNetwork(chainId === 1 ? 100 : 1)\r\n                }}\r\n              >\r\n                Switch Networks\r\n              </button>\r\n            )}\r\n            <button\r\n              style={{\r\n                height: '3rem',\r\n                borderRadius: '1rem',\r\n                cursor: 'pointer'\r\n              }}\r\n              onClick={() => {\r\n                ;(connector as any).close()\r\n              }}\r\n            >\r\n              Kill Portis Session\r\n            </button>\r\n          </>\r\n        )}\r\n        {connector === connectorsByName[ConnectorNames.Torus] && (\r\n          <button\r\n            style={{\r\n              height: '3rem',\r\n              borderRadius: '1rem',\r\n              cursor: 'pointer'\r\n            }}\r\n            onClick={() => {\r\n              ;(connector as any).close()\r\n            }}\r\n          >\r\n            Kill Torus Session\r\n          </button>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n}"]},"metadata":{},"sourceType":"module"}